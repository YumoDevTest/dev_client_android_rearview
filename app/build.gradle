apply plugin: 'com.android.application'


def getBuildSDKVersion = { ->
    def buildSDKVersion = System.getenv("Android_SDK_Version")
    println "buildSDKVersion is ${buildSDKVersion}"
    if (buildSDKVersion) {
        return Integer.parseInt(buildSDKVersion)
    }
//    if (rootProject.ext.compileSdkVersion) {
//        return rootProject.ext.compileSdkVersion
//    }
    return Integer.parseInt("22")
}

def getGitVersion = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'log', '-1', '--pretty=format:%h'
            standardOutput = stdout
        }
        return stdout.toString()
    } catch (ignored) {
        return '0000000';
    }
}
def getBuildToolVersion = { ->
//    if (rootProject.ext.buildToolsVersion) {
//        return rootProject.ext.buildToolsVersion
//    }
//    return project.ANDROID_BUILD_TOOLS_VERSION
    return "23.0.2"
}

def getPrefixName = { ->
    def prefixName = System.getenv("Prefix_Name")
    println "prefixName is ${prefixName}"
    if (prefixName) {
        return prefixName
    }
    return 'OBD'
}

def getBranchName = { ->
    def branchName = System.getenv("Branch_Name")
    println "branchName is ${branchName}"
    if (branchName) {
        branchName = branchName.substring(0, branchName.indexOf("/"))
        return branchName
    }
    return null
}

ext {
    GET_VERSION = getGitVersion()
    PREFIX_NAME = getPrefixName()
    BRANCH_NAME = getBranchName()
    println 'GitVersion is ' + project.GET_VERSION
}

android {
    compileSdkVersion 22
    buildToolsVersion '23.0.1'
    println "getBuildToolVersion" + getBuildToolVersion()
    defaultConfig {
        minSdkVersion 8
//        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
//        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
        targetSdkVersion 22
        applicationId "com.mapbar.android.obd.rearview"
        versionCode 2
        versionName "1.0.1"
        manifestPlaceholders = [UMENG_CHANNEL_VALUE: 'xiaomi']
    }
    signingConfigs {
        release {
            storeFile file("../key/mapbar2009.keystore")
            storePassword "mapbar2009"
            keyAlias "mapbar2009.keystore"
            keyPassword "mapbar2009"
        }
        debug {
        }
    }
    buildTypes {
        release {
            debuggable false
            // 不显示Log
//            buildConfigField "boolean", "LOG_DEBUG", "false"
//            minifyEnabled true// 是否混淆
            zipAlignEnabled true
            // 移除无用的resource文件
//            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
//            buildConfigField("String", "SERIALPORT_PATH", "\"/dev/ttyMT1\"")
            buildConfigField("String", "SERIALPORT_PATH", "\"/dev/ttys1\"")
            buildConfigField("Boolean", "IS_FAKE_IMEI", "false")
            buildConfigField("String", "FAKE_IMEI", "")
            buildConfigField("Boolean", "IS_FAKE_PERMISSION_MANAGER", "false")
            buildConfigField("String", "BASE_PERMISSION_URL", "\"http://119.255.37.167\"")
        }
        debug {
            debuggable true
//            buildConfigField("String", "SERIALPORT_PATH", "\"/dev/ttyMT1\"")
//            buildConfigField("String", "SERIALPORT_PATH", "\"/dev/ttyMT1\"")//串口地址
            buildConfigField("String", "SERIALPORT_PATH", "\"/dev/ttyMT2\"")//串口地址
//            buildConfigField("String", "SERIALPORT_PATH", "\"/dev/ttyS1\"")
            buildConfigField("Boolean", "IS_FAKE_IMEI", "true")//是否伪造IMEI
            buildConfigField("String", "FAKE_IMEI", "\"777296%%%%hh01739!55555555\"")//伪造的IMEI
            buildConfigField("Boolean", "IS_FAKE_PERMISSION_MANAGER", "false")//是否 伪造权限管理类
            buildConfigField("String", "BASE_PERMISSION_URL", "\"http://119.255.37.167\"")
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    flavors()
    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
//            java.srcDirs = ['src']
//            java.srcDirs +=['D:\\workspace\\as_work\\dev_sdk\\java\\core']
            // java.srcDirs += ['D:/obdCode1/dev_sdk/java/core']
//            java.srcDirs +=['/Users/zhangyunfei/git/dev_sdk/java/core']
            if (rootProject.hasProperty('obd_sdk_source_dir') && rootProject.ext.obd_sdk_source_dir)
                java.srcDirs += [rootProject.ext.obd_sdk_source_dir]
        }

        // Move the tests to tests/java, tests/res, etc...

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    dexOptions {    // 打开dex增量编译
        incremental true
//        jumboMode true
        preDexLibraries true
    }

}

def flavors() {
    def channels = System.getenv("Channels")
    if (channels) {
        println "channels is ${channels}"
        def separate1 = ':'

        def separate2 = '@'
        def first = "first"
        def indexSeparate1
        def indexSeparate2
        def channelName
        def channelKey
        def channelFirst
        channels.toString().tokenize(';').each { line ->
            println "==================== Channel Start ====================="
            println "line is ${line}"

            indexSeparate1 = line.indexOf(separate1)
            indexSeparate2 = line.indexOf(separate2)

            // Groovy的正则匹配不上......
            /*channelName = (line =~ /(.*):/).group()
//            channelName = ~/(.*):/.matches(line).group()
            println "channelName is ${channelName}"

            channelName = channelNameMatcher.group()
            println "channelName is ${channelName}"

            channelKey = (line =~ /:(.*)@/).group()
            println "channelKey is ${channelKey}"

            channelFirst = (line =~ /@(.*)/).group()
            println "channelFirst is ${channelFirst}"*/

            /*channelName = line.substring(0, indexSeparate1)
            println "channelName is ${channelName}"

            channelKey = line.substring(indexSeparate1 + separate1.length(), indexSeparate2)
            println "channelKey is ${channelKey}"

            channelFirst = line.substring(indexSeparate2 + separate2.length())
            println "channelFirst is ${channelFirst}"*/

            //动态创建productFlavor
            android.productFlavors.create(line, {
                // 替换渠道号
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: line]

                // target channel splash
                /*if (first == channelFirst) {
                    android.sourceSets."${channelName}".res.srcDirs = ["splash/${channelName}"]
                }*/
            })
            println "==================== Channel End ====================="
        }

        def log = project.logger
    }
    if (System.getenv("Android_SDK_Version")) {
        boolean debugVersion = true
        debugVersion = Boolean.parseBoolean(System.getenv("Debug_Version"))
        println "-----" + debugVersion
        println "debugVersion is ${debugVersion}"
        android.variantFilter { varian ->
            if (debugVersion) {
                if (varian.buildType.name.equals('release')) {
                    varian.setIgnore(true)
                }
            } else {
                if (varian.buildType.name.equals('debug')) {
                    varian.setIgnore(true)
                }
            }
        }
    }

}


dependencies {
    compile 'com.umeng.analytics:analytics:latest.integration'
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:recyclerview-v7:23.1.0'
    compile 'com.joanzapata.android:base-adapter-helper:1.1.11'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.squareup.okio:okio:1.5.0'
    compile files('libs/OBDDecodeHelper-1.1.jar')
    compile files('libs/protobuf-java-2.5.0.jar')
    compile files('libs/protobuf-java-2.5.0-sources.jar')
    compile files('libs/protobuf-java-format-1.2.jar')
}

android.applicationVariants.all { variant ->
    // 将打包的目录指定出去，对齐生成的apk
    variant.outputs.each { output ->
        if (System.getenv("Android_SDK_Version") == null) {
            return
        }
        def outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.apk')) {
            String outPath = System.getProperty('user.dir') + File.separator + 'apk'
//            String outPath = System.getProperty('user.dir') + File.separator + 'app'+ File.separator +"build/outputs/apk"
            StringBuilder fileNameBuilder = new StringBuilder()
            fileNameBuilder.append(project.PREFIX_NAME).append('_')
            if (project.BRANCH_NAME) {
                fileNameBuilder.append(project.BRANCH_NAME).append('_')
            }
            /*if (project.GET_VERSION) {
                fileNameBuilder.append(project.GET_VERSION).append('_')
            }*/
            if (variant.flavorName) {
                fileNameBuilder.append(variant.flavorName).append('_')
            }
            if (variant.buildType.name) {
                fileNameBuilder.append(variant.buildType.name).append('_')
            }
            fileNameBuilder.append(buildTime()).append('.apk')
            File dir = file(outPath)
            if (!dir.exists()) {
                dir.mkdirs();
            } else {
                // 如果不需要编译时删除掉历史apk，注释掉以下代码即可
                dir.list().each { fileName ->
                    file(outPath + File.separator + fileName).delete()
                }
            }
            output.outputFile = new File(dir, fileNameBuilder.toString())
        }
    }

}

def buildTime() {
    return new Date().format('yyyyMMdd_HHmm')
}

