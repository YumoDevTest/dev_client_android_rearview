apply plugin: 'com.android.application'

android {
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    compileSdkVersion 22
    buildToolsVersion '22.0.1'
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 22
        applicationId "com.mapbar.android.obd.rearview"
        versionCode project.VERSION_CODE == null ? 2 : project.VERSION_CODE
        versionName project.VERSION_NAME == null ? "1.0.1" : project.VERSION_NAME
        manifestPlaceholders = [UMENG_CHANNEL_VALUE: 'mapbar']
    }
    signingConfigs {
        release {
            storeFile file("../key/mapbar2009.keystore")
            storePassword "mapbar2009"
            keyAlias "mapbar2009.keystore"
            keyPassword "mapbar2009"
        }
        debug {
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled false// 是否混淆
            zipAlignEnabled true
            // 移除无用的resource文件
//            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField("String", "SERIALPORT_PATH", "\"/dev/ttys1\"")
            buildConfigField("Boolean", "IS_FAKE_IMEI", "false")
            buildConfigField("String", "FAKE_IMEI", "\"\"")
            buildConfigField("Boolean", "IS_ENABLE_PERMISSION", "false")
            buildConfigField("String", "BASE_PERMISSION_URL", "\"http://119.255.37.167\"")
            buildConfigField("Boolean", "IS_ENABLE_ALERM_ON_MAIN_PAGE", "true")
            buildConfigField("Boolean", "IS_ENABLE_TEST_CAR_DEMO", "false")//是否开启 模拟测试车辆控制的页面
        }
        if (project.IS_JENKINS) {
            beta {
                debuggable true
                minifyEnabled false
                buildConfigField("String", "SERIALPORT_PATH", "\"${SERIALPORT_PATH}\"")//串口地址
                buildConfigField("Boolean", "IS_FAKE_IMEI", "${IS_FAKE_IMEI}")//是否伪造IMEI
                buildConfigField("String", "FAKE_IMEI", "\"${FAKE_IMEI}\"")//伪造的IMEI
                buildConfigField("Boolean", "IS_ENABLE_PERMISSION", "${IS_ENABLE_PERMISSION}")
                buildConfigField("String", "BASE_PERMISSION_URL", "\"${BASE_PERMISSION_URL}\"")
                buildConfigField("Boolean", "IS_ENABLE_ALERM_ON_MAIN_PAGE", "true")
                buildConfigField("Boolean", "IS_ENABLE_TEST_CAR_DEMO", "${getPara_IS_ENABLE_TEST_CAR_DEMO}")
                signingConfig signingConfigs.debug
            }
        }
        debug {
            debuggable true
            minifyEnabled false
//            buildConfigField("String", "SERIALPORT_PATH", "\"/dev/ttyMT1\"")
//            buildConfigField("String", "SERIALPORT_PATH", "\"/dev/ttyMT1\"")//串口地址
            buildConfigField("String", "SERIALPORT_PATH", "\"/dev/ttyMT2\"")//串口地址
//            buildConfigField("String", "SERIALPORT_PATH", "\"/dev/ttyS1\"")
            buildConfigField("Boolean", "IS_FAKE_IMEI", "true")//是否伪造IMEI
            buildConfigField("String", "FAKE_IMEI", "\"DEVELOP_BY_ZHNGYF_20160826\"")//伪造的IMEI
            buildConfigField("Boolean", "IS_ENABLE_PERMISSION", "false")//是否 开启权限管理类
            //是否 伪造权限管理类
            buildConfigField("String", "BASE_PERMISSION_URL", "\"http://119.255.37.167\"")
            //是否开启 首页里的提醒对话框，每次都点很麻烦，就做了个开关
            buildConfigField("Boolean", "IS_ENABLE_ALERM_ON_MAIN_PAGE", "false")
            //是否开启 模拟测试车辆控制的页面
            buildConfigField("Boolean", "IS_ENABLE_TEST_CAR_DEMO", "false")//是否开启 模拟测试车辆控制的页面
            signingConfig signingConfigs.debug
        }

    }



    flavors()
    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
//            java.srcDirs = ['src']
            if (rootProject.hasProperty('obd_sdk_source_dir') && rootProject.ext.obd_sdk_source_dir)
                java.srcDirs += [rootProject.ext.obd_sdk_source_dir]
        }

        // Move the tests to tests/java, tests/res, etc...

    }
//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_7
//        targetCompatibility JavaVersion.VERSION_1_7
//    }
    dexOptions {    // 打开dex增量编译
        incremental true
//        jumboMode true
        preDexLibraries true
    }

}

def flavors() {
    if (!project.IS_JENKINS)
        return
    def channels = System.getenv("Channels")
    if (channels) {
        println "#环境变量 Channels = ${channels}"
        channels.toString().tokenize(';').each { channelItem ->
            println "==================== Channel Start ====================="
            println "# channelItem is ${channelItem}"
            //动态创建productFlavor
            android.productFlavors.create(channelItem, {
                // 替换渠道号
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: channelItem]

                println "# create productFlavors [${channelItem}] success"
            })
            println "==================== Channel End ====================="
        }
//        def log = project.logger
    }
    println "# 环境变量 构建类型 BUILD_TYPE = ${BUILD_TYPE}"
    if (!project.BUILD_TYPE)
        return
    android.variantFilter { varian ->
        println "# 遍历 " + varian.buildType.name
        //如果不是这个指定的 BUILD_TYPE,那个其他构建将被 忽略执行
        if (!varian.buildType.name.equals(project.BUILD_TYPE)) {
            varian.setIgnore(true)
        }
    }

}


dependencies {
    compile 'com.umeng.analytics:analytics:latest.integration'
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:recyclerview-v7:22.1.0'
    compile 'com.joanzapata.android:base-adapter-helper:1.1.11'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.squareup.okio:okio:1.5.0'
    compile files('libs/OBDDecodeHelper-1.1.jar')
    compile files('libs/protobuf-java-2.5.0.jar')
    compile files('libs/protobuf-java-2.5.0-sources.jar')
    compile files('libs/protobuf-java-format-1.2.jar')
    //    compile files('libs/apache-httpcomponents-httpcore.jar')
    compile 'com.google.code.gson:gson:2.7'
}

android.applicationVariants.all { variant ->
    // 将打包的目录指定出去，对齐生成的apk
    variant.outputs.each { output ->
        if (!project.IS_JENKINS) {
            return
        }
        def outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.apk')) {
            //开始准备 存放输出文件的文件夹路径
            String outPath = System.getProperty('user.dir') + File.separator + 'apk'
            File dir = file(outPath)
            if (!dir.exists()) {
                dir.mkdirs();
            } else {
                // 如果不需要编译时删除掉历史apk，注释掉以下代码即可
                dir.list().each { fileName ->
                    file(outPath + File.separator + fileName).delete()
                }
            }
            //开始拼接文件名
//            String outPath = System.getProperty('user.dir') + File.separator + 'app'+ File.separator +"build/outputs/apk"
            StringBuilder fileNameBuilder = new StringBuilder()
            //文件名前加： 前缀 PREFIX_NAME
            fileNameBuilder.append(project.PREFIX_NAME).append('_')
            //文件名前加： 分支名
            if (project.BRANCH_NAME) {
                fileNameBuilder.append(project.BRANCH_NAME).append('_')
            }
            /*if (project.GET_VERSION) {
                fileNameBuilder.append(project.GET_VERSION).append('_')
            }*/
            //文件名前加： channel 渠道名
            if (variant.flavorName) {
                println '# variant.flavorName:' + variant.flavorName
                fileNameBuilder.append(variant.flavorName).append('_')
            }
            //文件名前加： buildType
            if (variant.buildType.name) {
                println '# variant.buildType.name:' + variant.buildType.name
                fileNameBuilder.append(variant.buildType.name).append('_')
            }
            //文件名前加： versionName
            if (project.VERSION_NAME) {
                fileNameBuilder.append("Ver").append(project.VERSION_NAME).append('_')
            }
            //文件名前加： 月日时分秒
            fileNameBuilder.append(getBuildTimeStr()).append('.apk')

            output.outputFile = new File(dir, fileNameBuilder.toString())
            println "# 最终产出物文件名：" + output.outputFile
        }
    }

}

def getBuildTimeStr() {
    return new Date().format('MMddHHmm')
}

